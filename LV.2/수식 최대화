#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

//+, -, * 만으로 이루어진 연산 수식의 우선순위를 자유롭게 정의하여 만들 수 있는 가장 큰 숫자를 제출
//계산 결과가 음수라면, 절댓값 취한 다음에 최대인지 아닌지 비교
//3개의 연산자가 모두 포함되지는 않을 수도 있다.

long long answer = 0;
char op[3] = {'+', '-', '*'};
bool selected[3];
vector<char> ops, priority; //총 연산자, 우선순위
vector<long long> nums; //연산에 들어가는 수 모음

long long cal(long long a, long long b, char c) {
    if(c == '+') return a+b;
    if(c == '-') return a-b;
    if(c == '*') return a*b;
}

long long get_result() {
    vector<char> temp_ops = ops;
    vector<long long> temp_nums = nums;
    for(int i=0; i<3; i++) {
        char c = priority[i];
        for(int j=0; j<temp_ops.size(); j++) {
            if(c == temp_ops[j]) {
                long long res = cal(temp_nums[j], temp_nums[j+1], c);
                temp_nums[j] = res;
                temp_nums.erase(temp_nums.begin() + j + 1);
                temp_ops.erase(temp_ops.begin() + j);
                j--;
            }
        }
    }
    return temp_nums[0];
}

void DFS(int cnt) {
    if(cnt == 3) {
        long long res = get_result();
        answer = max(answer, abs(res));
        return;
    }
    for(int i=0; i<3; i++) {
        if(selected[i]) continue;
        selected[i] = true;
        priority.push_back(op[i]);
        DFS(cnt+1);
        priority.pop_back();
        selected[i] = false;
    }
}

long long solution(string expression) {
    int p = 0; //숫자 자르기 위한 변수, 연산자 위치 알기 위한 변수
    for(int i=0; i<expression.size(); i++) { //연산자, 숫자 분리해서 정리 완료
        if(!(expression[i] >= '0' && expression[i] <= '9')) {
            ops.push_back(expression[i]);        
            nums.push_back(stol(expression.substr(p, i-p)));
            p = i+1;   
        }
    }
    nums.push_back(stol(expression.substr(p)));
    DFS(0);
    
    return answer;
}
