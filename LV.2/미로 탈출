#include <string>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int step[102][102];
bool vis[102][102];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};

int solution(vector<string> maps) {
    int answer = 0;
    int stol = 0, ltoe = 0;
    int n = maps.size(); //세로
    int m = maps[0].size(); //가로
    pair<int, int> leb, end;
    queue<pair<int, int>> q;
    for(int i=0; i<n; i++) {
        fill(step[i], step[i]+m, -1);
        for(int j=0; j<m; j++) {
            if(maps[i][j] == 'S') {
                q.push({i, j});
                step[i][j] = 0;
                vis[i][j] = true;
            }
            else if(maps[i][j] == 'L') leb = {i, j};
            else if(maps[i][j] == 'E') end = {i, j};
        }
    }
    while(!q.empty()) {
        pair<int, int> cur = q.front();
        q.pop();
        for(int dir=0; dir<4; dir++) {
            int nx = cur.first + dx[dir];
            int ny = cur.second + dy[dir];
            if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
            if(vis[nx][ny] || maps[nx][ny] == 'X') continue;
            q.push({nx, ny});
            vis[nx][ny] = true;
            if(step[nx][ny] == -1) step[nx][ny] = step[cur.first][cur.second] + 1;
            else step[nx][ny] = max(step[nx][ny], step[cur.first][cur.second] + 1);
        }
    }
    if(step[leb.first][leb.second] == -1) stol = -1;
    else stol = step[leb.first][leb.second];
    for(int i=0; i<n; i++) {
        fill(vis[i], vis[i]+m, false);
        fill(step[i], step[i]+m, -1);
    }
    step[leb.first][leb.second] = 0;
    vis[leb.first][leb.second] = true;
    q.push({leb.first, leb.second});
    while(!q.empty()) {
        pair<int, int> cur = q.front();
        q.pop();
        for(int dir=0; dir<4; dir++) {
            int nx = cur.first + dx[dir];
            int ny = cur.second + dy[dir];
            if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
            if(vis[nx][ny] || maps[nx][ny] == 'X') continue;
            q.push({nx, ny});
            vis[nx][ny] = true;
            if(step[nx][ny] == -1) step[nx][ny] = step[cur.first][cur.second] + 1;
            else step[nx][ny] = max(step[nx][ny], step[cur.first][cur.second] + 1);
        }
    }
    if(step[end.first][end.second] == -1) ltoe = -1;
    else ltoe = step[end.first][end.second];
    
    if(stol == -1 || ltoe == -1) answer = -1;
    else answer = stol + ltoe;
    
    return answer;
}
